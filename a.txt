-> git works on concept of local repository.
-> whenever some changes are made in file , git records thoses changes so we can refer back to them later.
-> Based on the text in file, git creates a encryption key for it. When changes are made on file , git generates new key and 
compares them to find if any changes are made.

In git , file is in 3 states - 
-> modified - after doing git init , when we make changes in file it becomes modified
-> staged - after doing git add , file comes in staging area.
-> committed - after commiting file , it becomes unmodified again. Now if we make changes, it becomes modified and process is repeated.

Initially file is in working directory.
when  we do git add , file comes in staging area.
finally when we want to save file , we commit it to save it in local repo.

Staging Area - 
1. after doing git add, file comes in staging area. After we are done with making changes in all files , all of them are present 
in staging area , so we can commit all of them together.
2. if we want to revert back changes made in file, we can recall file from Staging area to working directory.

Git commands - 

git config --global user.email yourEmail  (set your user email in system)
git config --global user.name yourName    (set your user name in system)

git init -> git initialize (git starts recording changes in files created before )
.git file is created in folder ( this is local repo )
After doing git init , if we create an new file , it is untracked (any file in dir which was not in last commit and is not in staging area is called untracked) .
Now in order to track it , we can use git add.

git add - 
it serves 2 purpose.
-> if files were being tracked , they are sent in staging area.
-> if files were untracked , they are now being tracked.

-> git add . (all files)
-> git add fileName (particular file)
-> git add fileName1 fileName2 .. (many files)

git add fileName -> git starts tracking file
git status -> check status of file

git commit -m "message_here"